@using finaid.Services.Forms
@using finaid.Services.Knowledge
@inject IFormAssistanceService FormAssistanceService
@inject ILogger<FormSectionWithAI> Logger

<div class="form-section-with-ai">
    <div class="section-header d-flex justify-content-between align-items-center mb-3">
        <div>
            <h4 class="mb-1">@SectionTitle</h4>
            @if (!string.IsNullOrEmpty(SectionDescription))
            {
                <p class="text-muted mb-0">@SectionDescription</p>
            }
        </div>
        
        @if (EnableAIAssistance)
        {
            <div class="ai-assistance-controls">
                <button type="button" 
                        class="btn btn-outline-info btn-sm me-2" 
                        @onclick="ToggleSectionHelp"
                        disabled="@isLoadingHelp">
                    @if (isLoadingHelp)
                    {
                        <span class="spinner-border spinner-border-sm me-1" aria-hidden="true"></span>
                    }
                    else
                    {
                        <i class="bi bi-robot"></i>
                    }
                    Section Help
                </button>
                
                @if (completionPercentage > 0)
                {
                    <span class="badge bg-primary">@((int)(completionPercentage * 100))% Complete</span>
                }
            </div>
        }
    </div>

    @if (showSectionHelp && sectionContextualHelp != null)
    {
        <div class="ai-section-help alert alert-info">
            <div class="d-flex justify-content-between align-items-start">
                <div class="flex-grow-1">
                    <h6><i class="bi bi-robot"></i> AI Section Guidance</h6>
                    <p>@sectionContextualHelp.Content</p>
                    
                    @if (sectionContextualHelp.KeyPoints.Any())
                    {
                        <div class="key-points mt-2">
                            <strong>Key Points:</strong>
                            <ul class="small mt-1">
                                @foreach (var point in sectionContextualHelp.KeyPoints)
                                {
                                    <li>@point</li>
                                }
                            </ul>
                        </div>
                    }
                    
                    @if (sectionContextualHelp.ActionableSteps.Any())
                    {
                        <div class="actionable-steps mt-2">
                            <strong>Next Steps:</strong>
                            <ol class="small mt-1">
                                @foreach (var step in sectionContextualHelp.ActionableSteps)
                                {
                                    <li>@step</li>
                                }
                            </ol>
                        </div>
                    }
                </div>
                <button type="button" 
                        class="btn-close" 
                        @onclick="ToggleSectionHelp"
                        aria-label="Close section help">
                </button>
            </div>
        </div>
    }

    @if (formProgress != null)
    {
        <div class="form-progress-panel mb-3">
            <div class="card">
                <div class="card-body p-3">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="mb-0">Section Progress</h6>
                        <span class="text-primary">@((int)(formProgress.CompletionPercentage * 100))%</span>
                    </div>
                    
                    <div class="progress mb-2" style="height: 6px;">
                        <div class="progress-bar" 
                             role="progressbar" 
                             style="width: @((formProgress.CompletionPercentage * 100).ToString("F0"))%"
                             aria-valuenow="@((int)(formProgress.CompletionPercentage * 100))" 
                             aria-valuemin="0" 
                             aria-valuemax="100">
                        </div>
                    </div>

                    @if (formProgress.NextSteps.Any())
                    {
                        <div class="next-steps">
                            <strong class="small">Next Steps:</strong>
                            <div class="small text-muted">
                                @foreach (var step in formProgress.NextSteps.Take(3))
                                {
                                    <div><i class="bi bi-arrow-right"></i> @step</div>
                                }
                            </div>
                        </div>
                    }

                    @if (formProgress.MissingRequiredFields.Any())
                    {
                        <div class="missing-fields mt-2">
                            <strong class="small text-danger">Required Fields:</strong>
                            <div class="small text-danger">
                                @foreach (var field in formProgress.MissingRequiredFields.Take(5))
                                {
                                    <span class="badge bg-danger me-1">@field</span>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    <div class="form-section-content">
        @ChildContent
    </div>

    @if (EnableAIValidation && sectionValidationResults.Any())
    {
        <div class="section-validation-summary mt-3">
            <div class="card">
                <div class="card-header bg-light">
                    <h6 class="mb-0">
                        <i class="bi bi-shield-check"></i>
                        Section Validation Summary
                    </h6>
                </div>
                <div class="card-body p-3">
                    @foreach (var group in sectionValidationResults.GroupBy(v => v.SuggestionType))
                    {
                        <div class="validation-group mb-2">
                            <strong class="text-@GetValidationColor(group.Key)">
                                @GetValidationTitle(group.Key) (@group.Count())
                            </strong>
                            @foreach (var validation in group.Take(3))
                            {
                                <div class="small text-muted ms-3">
                                    <i class="bi bi-arrow-right"></i>
                                    @validation.FieldName: @validation.Message
                                </div>
                            }
                        </div>
                    }
                    
                    @if (sectionValidationResults.Count > 9)
                    {
                        <small class="text-muted">
                            ... and @(sectionValidationResults.Count - 9) more items
                        </small>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string SectionTitle { get; set; } = string.Empty;
    [Parameter] public string SectionDescription { get; set; } = string.Empty;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public object FormContext { get; set; } = new();
    [Parameter] public string SectionId { get; set; } = string.Empty;
    [Parameter] public bool EnableAIAssistance { get; set; } = true;
    [Parameter] public bool EnableAIValidation { get; set; } = true;
    [Parameter] public EventCallback<ValidationSuggestion[]> SectionValidationChanged { get; set; }
    [Parameter] public EventCallback<double> ProgressChanged { get; set; }

    private ContextualHelp? sectionContextualHelp;
    private FormCompletionAssistance? formProgress;
    private List<ValidationSuggestion> sectionValidationResults = new();
    private bool showSectionHelp = false;
    private bool isLoadingHelp = false;
    private double completionPercentage = 0;
    private bool isInitialized = false;

    protected override async Task OnParametersSetAsync()
    {
        if (EnableAIAssistance && !string.IsNullOrEmpty(SectionId) && !isInitialized)
        {
            isInitialized = true;
            await UpdateSectionProgressAsync();
        }
    }

    private async Task ToggleSectionHelp()
    {
        if (!showSectionHelp && sectionContextualHelp == null)
        {
            await LoadSectionHelpAsync();
        }
        
        showSectionHelp = !showSectionHelp;
        StateHasChanged();
    }

    private async Task LoadSectionHelpAsync()
    {
        if (isLoadingHelp) return;

        isLoadingHelp = true;
        try
        {
            // Get contextual help for this section
            var contextualHelp = await FormAssistanceService.ExplainFieldRequirementAsync(SectionTitle, FormContext);
            
            // Create mock ContextualHelp for now - in production, you'd extend IKnowledgeService
            sectionContextualHelp = new ContextualHelp
            {
                Context = SectionId,
                Title = SectionTitle,
                Content = contextualHelp,
                KeyPoints = ExtractKeyPoints(contextualHelp),
                ActionableSteps = ExtractActionableSteps(contextualHelp)
            };
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to load section help for: {SectionId}", SectionId);
        }
        finally
        {
            isLoadingHelp = false;
        }
    }

    private async Task UpdateSectionProgressAsync()
    {
        try
        {
            // Calculate completion percentage based on form context
            completionPercentage = CalculateCompletionPercentage();
            
            // Get AI-powered completion assistance
            formProgress = await FormAssistanceService.GetCompletionAssistanceAsync(
                SectionId, completionPercentage, FormContext);
            
            await ProgressChanged.InvokeAsync(completionPercentage);
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to update section progress for: {SectionId}", SectionId);
        }
    }

    public async Task ValidateSectionAsync()
    {
        if (!EnableAIValidation) return;

        try
        {
            // This would typically validate all fields in the section
            // For now, we'll use a placeholder implementation
            sectionValidationResults.Clear();
            
            await SectionValidationChanged.InvokeAsync(sectionValidationResults.ToArray());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to validate section: {SectionId}", SectionId);
        }
    }

    public void AddFieldValidation(ValidationSuggestion[] fieldValidations)
    {
        // Remove previous validations for this field and add new ones
        sectionValidationResults.RemoveAll(v => fieldValidations.Any(fv => fv.FieldName == v.FieldName));
        sectionValidationResults.AddRange(fieldValidations);
        StateHasChanged();
    }

    private double CalculateCompletionPercentage()
    {
        // Simple completion calculation - in production, this would be more sophisticated
        try
        {
            var formData = System.Text.Json.JsonSerializer.Serialize(FormContext);
            var properties = formData.Count(c => c == ':');
            var filledProperties = formData.Count(c => c == '"' && formData.IndexOf(c) > formData.LastIndexOf(':'));
            
            return properties > 0 ? Math.Min(1.0, (double)filledProperties / properties / 2) : 0.0;
        }
        catch
        {
            return 0.0;
        }
    }

    private static List<string> ExtractKeyPoints(string content)
    {
        var points = new List<string>();
        var lines = content.Split('\n');
        
        foreach (var line in lines)
        {
            var trimmed = line.Trim();
            if (trimmed.StartsWith("•") || trimmed.StartsWith("-") || 
                trimmed.Contains("important", StringComparison.OrdinalIgnoreCase) ||
                trimmed.Contains("key", StringComparison.OrdinalIgnoreCase))
            {
                points.Add(trimmed.TrimStart('•', '-', ' '));
            }
        }
        
        return points.Take(5).ToList();
    }

    private static List<string> ExtractActionableSteps(string content)
    {
        var steps = new List<string>();
        var lines = content.Split('\n');
        
        foreach (var line in lines)
        {
            var trimmed = line.Trim();
            if (trimmed.StartsWith("1.") || trimmed.StartsWith("2.") || 
                trimmed.StartsWith("3.") || trimmed.StartsWith("4.") ||
                trimmed.Contains("step", StringComparison.OrdinalIgnoreCase) ||
                trimmed.Contains("should", StringComparison.OrdinalIgnoreCase))
            {
                steps.Add(trimmed);
            }
        }
        
        return steps.Take(5).ToList();
    }

    private static string GetValidationColor(string suggestionType) => suggestionType switch
    {
        "error" => "danger",
        "warning" => "warning",
        "info" => "info",
        "improvement" => "success",
        _ => "secondary"
    };

    private static string GetValidationTitle(string suggestionType) => suggestionType switch
    {
        "error" => "Errors",
        "warning" => "Warnings",
        "info" => "Information",
        "improvement" => "Improvements",
        _ => "Other"
    };
}

<style>
    .form-section-with-ai {
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        background-color: #fff;
    }

    .ai-section-help {
        animation: slideDown 0.3s ease-out;
    }

    .form-progress-panel .card {
        border: 1px solid #e3f2fd;
        background-color: #f8f9ff;
    }

    .validation-group {
        border-left: 3px solid #dee2e6;
        padding-left: 0.75rem;
    }

    /* Keyframes animation for slideDown */
    .ai-section-help {
        animation: slideDown 0.3s ease-out;
    }

    .spinner-border-sm {
        width: 0.875rem;
        height: 0.875rem;
    }
</style>