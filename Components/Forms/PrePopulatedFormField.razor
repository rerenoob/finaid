@using finaid.Services.Forms
@using finaid.Models.Documents
@inject IJSRuntime JSRuntime

<div class="prepopulated-field @(IsAccepted ? "accepted" : "") @(IsRejected ? "rejected" : "") @(HasConflict ? "conflict" : "")">
    <div class="field-container">
        <label for="@FieldId" class="form-label">
            @Label
            @if (IsRequired)
            {
                <span class="text-danger">*</span>
            }
            @if (IsPrePopulated)
            {
                <span class="prepopulated-badge" title="This field was automatically filled from your uploaded documents">
                    <i class="bi bi-magic"></i>
                    Auto-filled
                </span>
            }
        </label>
        
        <div class="input-group">
            @if (FieldType == "text" || FieldType == "email" || FieldType == "tel")
            {
                <input type="@FieldType" 
                       id="@FieldId" 
                       class="form-control @ValidationClass" 
                       @bind="CurrentValue" 
                       @oninput="HandleValueChanged"
                       readonly="@IsReadOnly" 
                       placeholder="@Placeholder" />
            }
            else if (FieldType == "number" || FieldType == "currency")
            {
                <input type="number" 
                       id="@FieldId" 
                       class="form-control @ValidationClass" 
                       @bind="CurrentValue" 
                       @oninput="HandleValueChanged"
                       readonly="@IsReadOnly" 
                       placeholder="@Placeholder" 
                       step="@(FieldType == "currency" ? "0.01" : "1")" />
            }
            else if (FieldType == "date")
            {
                <input type="date" 
                       id="@FieldId" 
                       class="form-control @ValidationClass" 
                       @bind="CurrentDateValue" 
                       @oninput="HandleValueChanged"
                       readonly="@IsReadOnly" />
            }
            else if (FieldType == "select")
            {
                <select id="@FieldId" 
                        class="form-select @ValidationClass" 
                        @bind="CurrentValue" 
                        disabled="@IsReadOnly">
                    <option value="">Select...</option>
                    @foreach (var option in Options)
                    {
                        <option value="@option.Key">@option.Value</option>
                    }
                </select>
            }
            else
            {
                <textarea id="@FieldId" 
                          class="form-control @ValidationClass" 
                          @bind="CurrentValue" 
                          @oninput="HandleValueChanged"
                          readonly="@IsReadOnly" 
                          placeholder="@Placeholder" 
                          rows="3"></textarea>
            }
            
            @if (IsPrePopulated && !IsAccepted && !IsRejected)
            {
                <div class="btn-group prepopulated-actions" role="group">
                    <button type="button" 
                            class="btn btn-sm btn-success" 
                            @onclick="AcceptPrePopulatedValue" 
                            title="Accept this value">
                        <i class="bi bi-check"></i>
                    </button>
                    <button type="button" 
                            class="btn btn-sm btn-danger" 
                            @onclick="RejectPrePopulatedValue" 
                            title="Reject this value and enter manually">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
            }
        </div>
        
        @if (!string.IsNullOrEmpty(ValidationMessage))
        {
            <div class="invalid-feedback d-block">
                @ValidationMessage
            </div>
        }
        
        @if (IsPrePopulated && !string.IsNullOrEmpty(SourceDocument))
        {
            <div class="prepopulated-source">
                <small class="text-muted">
                    <i class="bi bi-file-text me-1"></i>
                    Source: @SourceDocument
                    @if (Confidence > 0)
                    {
                        <span class="confidence-badge ms-1" title="Confidence Level">
                            @((Confidence * 100).ToString("F0"))%
                        </span>
                    }
                </small>
            </div>
        }
        
        @if (HasConflict)
        {
            <div class="conflict-notice">
                <div class="alert alert-warning py-2 mt-2" role="alert">
                    <i class="bi bi-exclamation-triangle me-1"></i>
                    <strong>Multiple values found:</strong>
                    <ul class="mb-0 mt-1">
                        @foreach (var conflict in ConflictingValues)
                        {
                            <li>
                                <strong>@conflict.Value</strong> 
                                <small class="text-muted">(from @conflict.Source)</small>
                                @if (conflict.Value != CurrentValue)
                                {
                                    <button type="button" 
                                            class="btn btn-sm btn-outline-primary ms-2" 
                                            @onclick="() => UseConflictValue(conflict.Value)">
                                        Use This
                                    </button>
                                }
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
        
        @if (!string.IsNullOrEmpty(HelpText))
        {
            <div class="form-text">
                @HelpText
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string FieldId { get; set; } = string.Empty;
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public string FieldType { get; set; } = "text";
    [Parameter] public object? Value { get; set; }
    [Parameter] public EventCallback<object?> ValueChanged { get; set; }
    [Parameter] public bool IsRequired { get; set; }
    [Parameter] public bool IsReadOnly { get; set; }
    [Parameter] public string Placeholder { get; set; } = string.Empty;
    [Parameter] public string HelpText { get; set; } = string.Empty;
    [Parameter] public string ValidationMessage { get; set; } = string.Empty;
    [Parameter] public bool IsValid { get; set; } = true;
    
    // Pre-population specific parameters
    [Parameter] public bool IsPrePopulated { get; set; }
    [Parameter] public string SourceDocument { get; set; } = string.Empty;
    [Parameter] public decimal Confidence { get; set; }
    [Parameter] public bool HasConflict { get; set; }
    [Parameter] public List<ConflictingValue> ConflictingValues { get; set; } = new();
    [Parameter] public EventCallback<string> OnValueAccepted { get; set; }
    [Parameter] public EventCallback<string> OnValueRejected { get; set; }
    
    // Select options
    [Parameter] public Dictionary<string, string> Options { get; set; } = new();

    private bool IsAccepted { get; set; }
    private bool IsRejected { get; set; }

    private object? _currentValue;
    private object? CurrentValue
    {
        get => _currentValue ?? Value;
        set
        {
            if (_currentValue != value)
            {
                _currentValue = value;
                InvokeAsync(() => ValueChanged.InvokeAsync(value));
            }
        }
    }

    private DateTime? CurrentDateValue
    {
        get
        {
            var value = CurrentValue;
            if (value is DateTime dt) return dt;
            if (DateTime.TryParse(value?.ToString(), out var parsed)) return parsed;
            return null;
        }
        set
        {
            CurrentValue = value;
        }
    }

    private string ValidationClass => IsValid ? "" : "is-invalid";

    protected override void OnParametersSet()
    {
        if (Value != _currentValue)
        {
            _currentValue = Value;
        }
    }

    private async Task HandleValueChanged(ChangeEventArgs e)
    {
        var newValue = e.Value;
        
        // Convert based on field type
        object? convertedValue = FieldType switch
        {
            "number" when decimal.TryParse(newValue?.ToString(), out var d) => d,
            "currency" when decimal.TryParse(newValue?.ToString(), out var d) => d,
            "date" when DateTime.TryParse(newValue?.ToString(), out var dt) => dt,
            _ => newValue?.ToString() ?? ""
        };

        CurrentValue = convertedValue;
        
        // Reset pre-population status if user manually edits
        if (IsPrePopulated && !IsAccepted)
        {
            // User is manually editing, consider this as rejecting pre-populated value
            await RejectPrePopulatedValue();
        }
    }

    private async Task AcceptPrePopulatedValue()
    {
        IsAccepted = true;
        IsRejected = false;
        
        if (OnValueAccepted.HasDelegate)
        {
            await OnValueAccepted.InvokeAsync(FieldId);
        }
        
        StateHasChanged();
    }

    private async Task RejectPrePopulatedValue()
    {
        IsAccepted = false;
        IsRejected = true;
        
        // Clear the pre-populated value
        CurrentValue = FieldType switch
        {
            "number" or "currency" => 0m,
            "date" => null,
            _ => ""
        };
        
        if (OnValueRejected.HasDelegate)
        {
            await OnValueRejected.InvokeAsync(FieldId);
        }
        
        StateHasChanged();
    }

    private void UseConflictValue(object conflictValue)
    {
        CurrentValue = conflictValue;
        InvokeAsync(AcceptPrePopulatedValue);
    }

    public class ConflictingValue
    {
        public object Value { get; set; } = null!;
        public string Source { get; set; } = string.Empty;
        public decimal Confidence { get; set; }
    }
}

<style>
    .prepopulated-field {
        position: relative;
        margin-bottom: 1rem;
    }

    .prepopulated-field.accepted {
        background-color: rgba(25, 135, 84, 0.05);
        border-left: 3px solid var(--bs-success);
        padding: 0.5rem;
        border-radius: 0.375rem;
    }

    .prepopulated-field.rejected {
        background-color: rgba(220, 53, 69, 0.05);
        border-left: 3px solid var(--bs-danger);
        padding: 0.5rem;
        border-radius: 0.375rem;
    }

    .prepopulated-field.conflict {
        background-color: rgba(255, 193, 7, 0.05);
        border-left: 3px solid var(--bs-warning);
        padding: 0.5rem;
        border-radius: 0.375rem;
    }

    .prepopulated-badge {
        display: inline-block;
        background-color: var(--bs-primary);
        color: white;
        font-size: 0.75rem;
        padding: 0.2rem 0.4rem;
        border-radius: 0.25rem;
        margin-left: 0.5rem;
        font-weight: 500;
    }

    .prepopulated-actions {
        border-left: 1px solid var(--bs-border-color);
    }

    .prepopulated-actions .btn {
        border-radius: 0;
        border: none;
        padding: 0.5rem 0.75rem;
    }

    .prepopulated-actions .btn:first-child {
        border-top-right-radius: var(--bs-border-radius);
    }

    .prepopulated-actions .btn:last-child {
        border-bottom-right-radius: var(--bs-border-radius);
    }

    .prepopulated-source {
        margin-top: 0.25rem;
    }

    .confidence-badge {
        display: inline-block;
        background-color: var(--bs-secondary);
        color: white;
        font-size: 0.7rem;
        padding: 0.1rem 0.3rem;
        border-radius: 0.2rem;
        font-weight: 500;
    }

    .conflict-notice ul {
        padding-left: 1rem;
    }

    .conflict-notice li {
        margin-bottom: 0.25rem;
    }

    .input-group .prepopulated-actions {
        display: flex;
        flex-direction: column;
    }

    /* Mobile responsive adjustments */
    @@media (max-width: 768px) {
        .prepopulated-actions {
            position: absolute;
            top: 0;
            right: 0;
            z-index: 10;
            flex-direction: row;
        }
        
        .prepopulated-actions .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.8rem;
        }
        
        .prepopulated-badge {
            font-size: 0.7rem;
            padding: 0.1rem 0.3rem;
        }
    }
</style>