@using finaid.Services.Forms
@using finaid.Services.Knowledge
@inject IFormAssistanceService FormAssistanceService
@inject ILogger<IntelligentFormAssistant> Logger

<div class="intelligent-form-assistant">
    <div class="form-header mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h2 class="mb-1">@FormTitle</h2>
                @if (!string.IsNullOrEmpty(FormDescription))
                {
                    <p class="text-muted">@FormDescription</p>
                }
            </div>
            
            <div class="form-controls">
                @if (EnableAIAssistance)
                {
                    <button type="button" 
                            class="btn btn-outline-primary me-2" 
                            @onclick="ToggleAIPanel"
                            disabled="@isGeneratingReview">
                        @if (isGeneratingReview)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                        }
                        <i class="bi bi-robot"></i>
                        AI Assistant
                    </button>
                }
                
                @if (overallProgress > 0)
                {
                    <div class="progress-display d-inline-block">
                        <span class="badge bg-primary">@((int)(overallProgress * 100))% Complete</span>
                    </div>
                }
            </div>
        </div>

        @if (overallProgress > 0)
        {
            <div class="overall-progress mt-3">
                <div class="progress" style="height: 8px;">
                    <div class="progress-bar bg-primary" 
                         role="progressbar" 
                         style="width: @((overallProgress * 100).ToString("F0"))%"
                         aria-valuenow="@((int)(overallProgress * 100))" 
                         aria-valuemin="0" 
                         aria-valuemax="100">
                    </div>
                </div>
            </div>
        }
    </div>

    @if (showAIPanel)
    {
        <div class="ai-assistant-panel card mb-4">
            <div class="card-header bg-primary text-white">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-robot"></i>
                        AI Form Assistant
                    </h5>
                    <button type="button" 
                            class="btn-close btn-close-white" 
                            @onclick="ToggleAIPanel"
                            aria-label="Close AI panel">
                    </button>
                </div>
            </div>
            <div class="card-body">
                @if (formReview != null)
                {
                    <div class="form-review-summary">
                        <div class="row">
                            <div class="col-md-8">
                                <h6>Form Review Summary</h6>
                                <p>@formReview.OverallAssessment</p>
                                
                                @if (formReview.Issues.Any())
                                {
                                    <div class="issues-summary">
                                        <h6 class="text-danger">Issues Found (@formReview.Issues.Count)</h6>
                                        @foreach (var issue in formReview.Issues.Take(5))
                                        {
                                            <div class="alert alert-@GetReviewAlertClass(issue.Severity) alert-sm">
                                                <strong>@issue.FieldName:</strong> @issue.Message
                                            </div>
                                        }
                                    </div>
                                }

                                @if (formReview.ImprovementSuggestions.Any())
                                {
                                    <div class="improvements">
                                        <h6 class="text-info">Suggestions for Improvement</h6>
                                        <ul class="small">
                                            @foreach (var suggestion in formReview.ImprovementSuggestions.Take(5))
                                            {
                                                <li>@suggestion</li>
                                            }
                                        </ul>
                                    </div>
                                }

                                @if (formReview.Strengths.Any())
                                {
                                    <div class="strengths">
                                        <h6 class="text-success">Form Strengths</h6>
                                        <ul class="small">
                                            @foreach (var strength in formReview.Strengths.Take(3))
                                            {
                                                <li>@strength</li>
                                            }
                                        </ul>
                                    </div>
                                }
                            </div>
                            <div class="col-md-4">
                                <div class="quality-score text-center">
                                    <div class="score-circle mx-auto mb-2" style="--score: @((int)(formReview.QualityScore * 100))">
                                        <div class="score-text">
                                            <span class="h4">@((int)(formReview.QualityScore * 100))</span>
                                            <small>Quality Score</small>
                                        </div>
                                    </div>
                                    
                                    <div class="readiness-status">
                                        @if (formReview.IsReadyForSubmission)
                                        {
                                            <span class="badge bg-success">Ready for Submission</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning text-dark">Needs Review</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (formReview.FinalChecklist.Any())
                        {
                            <div class="final-checklist mt-3">
                                <h6>Final Checklist</h6>
                                <div class="checklist">
                                    @foreach (var item in formReview.FinalChecklist)
                                    {
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="check-@(formReview.FinalChecklist.IndexOf(item))">
                                            <label class="form-check-label small" for="check-@(formReview.FinalChecklist.IndexOf(item))">
                                                @item
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-3">
                        <button type="button" 
                                class="btn btn-primary" 
                                @onclick="GenerateFormReviewAsync"
                                disabled="@isGeneratingReview">
                            @if (isGeneratingReview)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                                <text>Analyzing form...</text>
                            }
                            else
                            {
                                <i class="bi bi-search"></i>
                                <text>Analyze Form with AI</text>
                            }
                        </button>
                    </div>
                }
            </div>
        </div>
    }

    <div class="form-content">
        @ChildContent
    </div>

    @if (EnableAIAssistance && allValidationSuggestions.Any())
    {
        <div class="form-validation-summary mt-4">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="bi bi-shield-check"></i>
                        Form Validation Summary
                        <span class="badge bg-secondary ms-2">@allValidationSuggestions.Count items</span>
                    </h6>
                </div>
                <div class="card-body">
                    @foreach (var severityGroup in allValidationSuggestions.GroupBy(v => v.Severity))
                    {
                        <div class="severity-group mb-3">
                            <h6 class="text-@GetValidationColor(severityGroup.Key)">
                                @GetSeverityTitle(severityGroup.Key) (@severityGroup.Count())
                            </h6>
                            <div class="row">
                                @foreach (var validation in severityGroup.Take(6))
                                {
                                    <div class="col-md-6 mb-2">
                                        <div class="validation-item">
                                            <strong class="small">@validation.FieldName:</strong>
                                            <div class="small text-muted">@validation.Message</div>
                                            @if (!string.IsNullOrEmpty(validation.SuggestedFix))
                                            {
                                                <div class="small text-success">
                                                    <i class="bi bi-lightbulb"></i> @validation.SuggestedFix
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string FormTitle { get; set; } = "Intelligent Form";
    [Parameter] public string FormDescription { get; set; } = string.Empty;
    [Parameter] public string FormType { get; set; } = "generic";
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public object FormContext { get; set; } = new();
    [Parameter] public bool EnableAIAssistance { get; set; } = true;
    [Parameter] public EventCallback<FormReviewSummary> ReviewGenerated { get; set; }
    [Parameter] public EventCallback<double> ProgressChanged { get; set; }

    private FormReviewSummary? formReview;
    private List<ValidationSuggestion> allValidationSuggestions = new();
    private bool showAIPanel = false;
    private bool isGeneratingReview = false;
    private double overallProgress = 0;

    protected override void OnParametersSet()
    {
        UpdateOverallProgress();
    }

    private void ToggleAIPanel()
    {
        showAIPanel = !showAIPanel;
        StateHasChanged();
    }

    private async Task GenerateFormReviewAsync()
    {
        if (isGeneratingReview) return;

        isGeneratingReview = true;
        try
        {
            formReview = await FormAssistanceService.GenerateFormReviewAsync(FormContext, FormType);
            await ReviewGenerated.InvokeAsync(formReview);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to generate form review");
            formReview = new FormReviewSummary
            {
                FormType = FormType,
                OverallAssessment = "Unable to generate review at this time. Please check your form manually.",
                QualityScore = 0.5
            };
        }
        finally
        {
            isGeneratingReview = false;
            StateHasChanged();
        }
    }

    public void AddSectionValidations(ValidationSuggestion[] validations)
    {
        // Update the overall validation list
        foreach (var validation in validations)
        {
            allValidationSuggestions.RemoveAll(v => v.FieldName == validation.FieldName);
        }
        allValidationSuggestions.AddRange(validations);
        StateHasChanged();
    }

    public void UpdateSectionProgress(double sectionProgress)
    {
        UpdateOverallProgress();
    }

    private void UpdateOverallProgress()
    {
        // Simple progress calculation - in production, this would be more sophisticated
        try
        {
            var formData = System.Text.Json.JsonSerializer.Serialize(FormContext);
            var totalFields = formData.Count(c => c == ':');
            var filledFields = formData.Split('"').Count(s => !string.IsNullOrWhiteSpace(s) && s != ":" && s != ",");
            
            overallProgress = totalFields > 0 ? Math.Min(1.0, (double)filledFields / totalFields / 2) : 0.0;
        }
        catch
        {
            overallProgress = 0.0;
        }
    }

    private static string GetReviewAlertClass(string severity) => severity switch
    {
        "high" or "critical" => "danger",
        "medium" => "warning",
        "low" => "info",
        _ => "secondary"
    };

    private static string GetValidationColor(string severity) => severity switch
    {
        "high" or "critical" => "danger",
        "medium" => "warning",
        "low" => "info",
        _ => "secondary"
    };

    private static string GetSeverityTitle(string severity) => severity switch
    {
        "high" => "High Priority Issues",
        "critical" => "Critical Issues",
        "medium" => "Medium Priority Issues",
        "low" => "Low Priority Issues",
        _ => "Other Issues"
    };
}

<style>
    .intelligent-form-assistant {
        max-width: 1200px;
        margin: 0 auto;
    }

    .ai-assistant-panel {
        border: 2px solid #007bff;
        box-shadow: 0 4px 6px rgba(0, 123, 255, 0.1);
    }

    .quality-score .score-circle {
        position: relative;
        width: 100px;
        height: 100px;
        border-radius: 50%;
        background: conic-gradient(#28a745 0% calc(var(--score) * 1%), #e9ecef calc(var(--score) * 1%) 100%);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .quality-score .score-circle::before {
        content: '';
        position: absolute;
        width: 80px;
        height: 80px;
        background: white;
        border-radius: 50%;
        z-index: 1;
    }

    .quality-score .score-text {
        position: relative;
        z-index: 2;
        text-align: center;
    }

    .validation-item {
        padding: 0.5rem;
        background: #f8f9fa;
        border-left: 3px solid #dee2e6;
        border-radius: 0.25rem;
    }

    .overall-progress {
        animation: fadeIn 0.5s ease-in;
    }

    /* CSS animation for fadeIn */

    .form-validation-summary .severity-group {
        border-bottom: 1px solid #dee2e6;
    }

    .form-validation-summary .severity-group:last-child {
        border-bottom: none;
    }
</style>