@using finaid.Models.UI

<div class="upload-progress-item @GetStatusClass()">
    <div class="upload-header">
        <div class="file-info">
            <i class="@GetFileIcon() me-2"></i>
            <span class="file-name" title="@Upload.FileName">@Upload.FileName</span>
            <span class="file-size text-muted">(@Upload.FormattedFileSize)</span>
        </div>
        
        <div class="upload-actions">
            @if (Upload.Status == UploadStatus.Uploading || Upload.Status == UploadStatus.Processing)
            {
                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="CancelUpload" title="Cancel upload">
                    <i class="bi bi-x-circle"></i>
                </button>
            }
            @if (Upload.Status == UploadStatus.Failed)
            {
                <button type="button" class="btn btn-sm btn-outline-primary" @onclick="RetryUpload" title="Retry upload">
                    <i class="bi bi-arrow-clockwise"></i>
                </button>
            }
        </div>
    </div>

    <div class="progress-container">
        @if (Upload.Status == UploadStatus.Completed)
        {
            <div class="upload-success">
                <i class="bi bi-check-circle-fill text-success me-2"></i>
                <span class="status-text">Upload completed successfully</span>
                @if (Upload.DetectedType != null && Upload.DetectedType != finaid.Models.Document.DocumentType.Other)
                {
                    <span class="detected-type badge bg-info ms-2">@Upload.DetectedType</span>
                }
            </div>
        }
        else if (Upload.Status == UploadStatus.Failed)
        {
            <div class="upload-error">
                <i class="bi bi-exclamation-triangle-fill text-danger me-2"></i>
                <span class="status-text">@(Upload.ErrorMessage ?? "Upload failed")</span>
            </div>
        }
        else if (Upload.Status == UploadStatus.Cancelled)
        {
            <div class="upload-cancelled">
                <i class="bi bi-x-circle-fill text-warning me-2"></i>
                <span class="status-text">Upload cancelled</span>
            </div>
        }
        else
        {
            <div class="progress-bar-container">
                <div class="progress" role="progressbar" aria-valuenow="@Upload.ProgressPercentage" aria-valuemin="0" aria-valuemax="100">
                    <div class="progress-bar @GetProgressBarClass()" style="width: @(Upload.ProgressPercentage)%"></div>
                </div>
                <div class="progress-text">
                    <span class="status-text">@GetStatusText()</span>
                    <span class="progress-percentage">@Upload.ProgressPercentage.ToString("F1")%</span>
                </div>
            </div>
            
            @if (Upload.Status == UploadStatus.Uploading)
            {
                <div class="upload-details">
                    <small class="text-muted">
                        @Upload.FormattedUploadedSize of @Upload.FormattedFileSize
                        @if (Upload.ElapsedTime.HasValue)
                        {
                            <span class="ms-2">â€¢ @FormatElapsedTime(Upload.ElapsedTime.Value)</span>
                        }
                    </small>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired] public DocumentUploadState Upload { get; set; } = null!;
    [Parameter] public EventCallback<DocumentUploadState> OnCancel { get; set; }
    [Parameter] public EventCallback<DocumentUploadState> OnRetry { get; set; }

    private string GetStatusClass()
    {
        return Upload.Status switch
        {
            UploadStatus.Completed => "upload-completed",
            UploadStatus.Failed => "upload-failed",
            UploadStatus.Cancelled => "upload-cancelled",
            _ => "upload-active"
        };
    }

    private string GetProgressBarClass()
    {
        return Upload.Status switch
        {
            UploadStatus.Validating => "bg-info",
            UploadStatus.Uploading => "bg-primary",
            UploadStatus.Processing => "bg-warning",
            _ => "bg-primary"
        };
    }

    private string GetStatusText()
    {
        return Upload.Status switch
        {
            UploadStatus.Queued => "Queued for upload...",
            UploadStatus.Validating => "Validating file...",
            UploadStatus.Uploading => "Uploading...",
            UploadStatus.Processing => "Processing document...",
            _ => "Unknown status"
        };
    }

    private string GetFileIcon()
    {
        var extension = Path.GetExtension(Upload.FileName).ToLowerInvariant();
        return extension switch
        {
            ".pdf" => "bi bi-file-earmark-pdf-fill text-danger",
            ".jpg" or ".jpeg" or ".png" or ".gif" => "bi bi-file-earmark-image-fill text-success",
            ".tiff" or ".tif" => "bi bi-file-earmark-image-fill text-info",
            ".doc" or ".docx" => "bi bi-file-earmark-word-fill text-primary",
            _ => "bi bi-file-earmark-fill text-secondary"
        };
    }

    private string FormatElapsedTime(TimeSpan elapsed)
    {
        if (elapsed.TotalMinutes < 1)
            return $"{elapsed.Seconds}s";
        else if (elapsed.TotalHours < 1)
            return $"{elapsed.Minutes}m {elapsed.Seconds}s";
        else
            return $"{elapsed.Hours}h {elapsed.Minutes}m";
    }

    private async Task CancelUpload()
    {
        if (OnCancel.HasDelegate)
            await OnCancel.InvokeAsync(Upload);
    }

    private async Task RetryUpload()
    {
        if (OnRetry.HasDelegate)
            await OnRetry.InvokeAsync(Upload);
    }
}

<style>
    .upload-progress-item {
        border: 1px solid var(--bs-border-color);
        border-radius: 0.375rem;
        padding: 1rem;
        margin-bottom: 0.5rem;
        background-color: var(--bs-body-bg);
        transition: all 0.15s ease-in-out;
    }

    .upload-progress-item:hover {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .upload-active {
        border-left: 4px solid var(--bs-primary);
    }

    .upload-completed {
        border-left: 4px solid var(--bs-success);
        background-color: rgba(25, 135, 84, 0.05);
    }

    .upload-failed {
        border-left: 4px solid var(--bs-danger);
        background-color: rgba(220, 53, 69, 0.05);
    }

    .upload-cancelled {
        border-left: 4px solid var(--bs-warning);
        background-color: rgba(255, 193, 7, 0.05);
    }

    .upload-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
    }

    .file-info {
        display: flex;
        align-items: center;
        flex: 1;
        min-width: 0;
    }

    .file-name {
        font-weight: 500;
        color: var(--bs-body-color);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 300px;
    }

    .file-size {
        margin-left: 0.5rem;
        font-size: 0.875rem;
    }

    .upload-actions {
        display: flex;
        gap: 0.25rem;
    }

    .progress-bar-container {
        margin-bottom: 0.5rem;
    }

    .progress {
        height: 8px;
        background-color: var(--bs-gray-200);
        margin-bottom: 0.5rem;
    }

    .progress-text {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.875rem;
    }

    .status-text {
        color: var(--bs-body-color);
    }

    .progress-percentage {
        font-weight: 600;
        color: var(--bs-primary);
    }

    .upload-details {
        margin-top: 0.25rem;
    }

    .upload-success,
    .upload-error,
    .upload-cancelled {
        display: flex;
        align-items: center;
        font-size: 0.875rem;
    }

    .detected-type {
        font-size: 0.75rem;
        text-transform: capitalize;
    }

    @@media (max-width: 576px) {
        .upload-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }

        .upload-actions {
            align-self: flex-end;
        }

        .file-name {
            max-width: 250px;
        }
    }
</style>