@using finaid.Models.Documents
@using DocumentModel = finaid.Models.Document
@using finaid.Services.Documents
@using DocumentStatus = finaid.Models.Document.DocumentStatus
@inject IDocumentUIService DocumentUIService
@inject IJSRuntime JSRuntime

@if (!Documents.Any())
{
    <div class="empty-documents">
        <div class="text-center py-5">
            <i class="bi bi-folder2-open fs-1 text-muted mb-3"></i>
            <h6 class="text-muted mb-2">No documents uploaded yet</h6>
            <p class="text-muted">Upload your first document to get started</p>
        </div>
    </div>
}
else
{
    <div class="document-list">
        @foreach (var document in Documents.OrderByDescending(d => d.UploadedAt))
        {
            <div class="document-item">
                <div class="document-info">
                    <div class="document-icon">
                        <i class="@GetDocumentIcon(document) fs-4"></i>
                    </div>
                    
                    <div class="document-details">
                        <div class="document-name" title="@document.FileName">
                            @document.FileName
                        </div>
                        <div class="document-meta">
                            <span class="document-type badge @GetTypeBadgeClass(document.Type)">
                                @GetDocumentTypeDisplay(document.Type)
                            </span>
                            <span class="document-size text-muted">
                                @FormatFileSize(document.FileSizeBytes)
                            </span>
                            <span class="document-date text-muted">
                                @FormatUploadDate(document.UploadedAt)
                            </span>
                        </div>
                        <div class="document-status">
                            @if (document.Status == DocumentStatus.Processing)
                            {
                                <div class="processing-status">
                                    <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
                                        <span class="visually-hidden">Processing...</span>
                                    </div>
                                    <span class="text-primary">Processing...</span>
                                </div>
                            }
                            else
                            {
                                <span class="status-badge badge @GetStatusBadgeClass(document.Status)">
                                    <i class="@GetStatusIcon(document.Status) me-1"></i>
                                    @GetStatusDisplay(document.Status)
                                </span>
                            }
                        </div>
                    </div>
                </div>

                <div class="document-actions">
                    <div class="btn-group" role="group">
                        <button type="button" 
                                class="btn btn-sm btn-outline-primary" 
                                @onclick="() => PreviewDocument(document)"
                                title="Preview document">
                            <i class="bi bi-eye"></i>
                        </button>
                        
                        <button type="button" 
                                class="btn btn-sm btn-outline-secondary" 
                                @onclick="() => DownloadDocument(document)"
                                title="Download document">
                            <i class="bi bi-download"></i>
                        </button>
                        
                        @if (document.Status != DocumentStatus.Processing)
                        {
                            <button type="button" 
                                    class="btn btn-sm btn-outline-danger" 
                                    @onclick="() => ShowDeleteConfirmation(document)"
                                    title="Delete document">
                                <i class="bi bi-trash"></i>
                            </button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@* Delete Confirmation Modal *@
@if (documentToDelete != null)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle text-warning me-2"></i>
                        Confirm Delete
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideDeleteConfirmation"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this document?</p>
                    <div class="document-preview">
                        <i class="@GetDocumentIcon(documentToDelete) me-2"></i>
                        <strong>@documentToDelete.FileName</strong>
                    </div>
                    <div class="alert alert-warning mt-3 mb-0">
                        <small>
                            <i class="bi bi-info-circle me-1"></i>
                            This action cannot be undone. The document will be permanently removed from your account.
                        </small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideDeleteConfirmation">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Deleting...</span>
                            </div>
                        }
                        Delete Document
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter, EditorRequired] public List<DocumentMetadata> Documents { get; set; } = new();
    [Parameter] public EventCallback<Guid> OnDocumentDelete { get; set; }
    [Parameter] public EventCallback<DocumentMetadata> OnDocumentPreview { get; set; }

    private DocumentMetadata? documentToDelete;
    private bool isDeleting = false;

    private string GetDocumentIcon(DocumentMetadata document)
    {
        var extension = Path.GetExtension(document.FileName).ToLowerInvariant();
        return extension switch
        {
            ".pdf" => "bi bi-file-earmark-pdf-fill text-danger",
            ".jpg" or ".jpeg" or ".png" or ".gif" => "bi bi-file-earmark-image-fill text-success",
            ".tiff" or ".tif" => "bi bi-file-earmark-image-fill text-info",
            ".doc" or ".docx" => "bi bi-file-earmark-word-fill text-primary",
            _ => "bi bi-file-earmark-fill text-secondary"
        };
    }

    private string GetDocumentTypeDisplay(finaid.Models.Document.DocumentType type)
    {
        return type switch
        {
            finaid.Models.Document.DocumentType.TaxReturn => "Tax Return",
            finaid.Models.Document.DocumentType.W2Form => "W-2 Form",
            finaid.Models.Document.DocumentType.BankStatement => "Bank Statement",
            finaid.Models.Document.DocumentType.SocialSecurityCard => "Social Security Card",
            finaid.Models.Document.DocumentType.DriversLicense => "Driver's License",
            finaid.Models.Document.DocumentType.Passport => "Passport",
            finaid.Models.Document.DocumentType.BirthCertificate => "Birth Certificate",
            finaid.Models.Document.DocumentType.HighSchoolTranscript => "High School Transcript",
            finaid.Models.Document.DocumentType.CollegeTranscript => "College Transcript",
            finaid.Models.Document.DocumentType.VerificationWorksheet => "Verification Worksheet",
            _ => "Other"
        };
    }

    private string GetTypeBadgeClass(finaid.Models.Document.DocumentType type)
    {
        return type switch
        {
            finaid.Models.Document.DocumentType.TaxReturn => "bg-primary",
            finaid.Models.Document.DocumentType.W2Form => "bg-success",
            finaid.Models.Document.DocumentType.BankStatement => "bg-info",
            finaid.Models.Document.DocumentType.SocialSecurityCard or finaid.Models.Document.DocumentType.DriversLicense or finaid.Models.Document.DocumentType.Passport or finaid.Models.Document.DocumentType.BirthCertificate => "bg-warning text-dark",
            finaid.Models.Document.DocumentType.HighSchoolTranscript or finaid.Models.Document.DocumentType.CollegeTranscript => "bg-purple",
            finaid.Models.Document.DocumentType.VerificationWorksheet => "bg-secondary",
            _ => "bg-light text-dark"
        };
    }

    private string GetStatusDisplay(DocumentStatus status)
    {
        return status switch
        {
            DocumentStatus.Uploaded => "Uploaded",
            DocumentStatus.Processing => "Processing",
            DocumentStatus.Verified => "Verified",
            DocumentStatus.Rejected => "Rejected",
            DocumentStatus.RequiresAction => "Requires Action",
            _ => status.ToString()
        };
    }

    private string GetStatusBadgeClass(DocumentStatus status)
    {
        return status switch
        {
            DocumentStatus.Verified => "bg-success",
            DocumentStatus.Processing => "bg-warning text-dark",
            DocumentStatus.Rejected => "bg-danger",
            DocumentStatus.RequiresAction => "bg-warning text-dark",
            _ => "bg-secondary"
        };
    }

    private string GetStatusIcon(DocumentStatus status)
    {
        return status switch
        {
            DocumentStatus.Verified => "bi bi-check-circle-fill",
            DocumentStatus.Processing => "bi bi-arrow-clockwise",
            DocumentStatus.Rejected => "bi bi-x-circle-fill",
            DocumentStatus.RequiresAction => "bi bi-exclamation-triangle-fill",
            _ => "bi bi-circle-fill"
        };
    }

    private string FormatFileSize(long bytes)
    {
        const int scale = 1024;
        string[] orders = { "B", "KB", "MB", "GB" };
        long max = (long)Math.Pow(scale, orders.Length - 1);
        
        foreach (string order in orders)
        {
            if (bytes > max)
                return $"{decimal.Divide(bytes, max):##.##} {order}";
            max /= scale;
        }
        
        return $"{bytes} B";
    }

    private string FormatUploadDate(DateTime uploadedAt)
    {
        var timeSpan = DateTime.UtcNow - uploadedAt;
        
        if (timeSpan.TotalDays >= 1)
            return uploadedAt.ToString("MMM dd, yyyy");
        else if (timeSpan.TotalHours >= 1)
            return $"{(int)timeSpan.TotalHours} hours ago";
        else if (timeSpan.TotalMinutes >= 1)
            return $"{(int)timeSpan.TotalMinutes} minutes ago";
        else
            return "Just now";
    }

    private async Task PreviewDocument(DocumentMetadata document)
    {
        if (OnDocumentPreview.HasDelegate)
        {
            await OnDocumentPreview.InvokeAsync(document);
        }
        else
        {
            // Default behavior - open in new tab
            await DownloadDocument(document);
        }
    }

    private async Task DownloadDocument(DocumentMetadata document)
    {
        try
        {
            var downloadUrl = await DocumentUIService.GetDocumentDownloadUrlAsync(document.Id, TimeSpan.FromHours(1));
            await JSRuntime.InvokeVoidAsync("window.open", downloadUrl, "_blank");
        }
        catch (Exception)
        {
            // Handle error - could show toast notification
            await JSRuntime.InvokeVoidAsync("alert", "Unable to download document. Please try again.");
        }
    }

    private void ShowDeleteConfirmation(DocumentMetadata document)
    {
        documentToDelete = document;
    }

    private void HideDeleteConfirmation()
    {
        documentToDelete = null;
        isDeleting = false;
    }

    private async Task ConfirmDelete()
    {
        if (documentToDelete == null) return;

        isDeleting = true;
        StateHasChanged();

        try
        {
            if (OnDocumentDelete.HasDelegate)
            {
                await OnDocumentDelete.InvokeAsync(documentToDelete.Id);
            }
        }
        finally
        {
            HideDeleteConfirmation();
        }
    }
}

<style>
    .empty-documents {
        border: 1px dashed var(--bs-border-color);
        border-radius: 0.5rem;
    }

    .document-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .document-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;
        background-color: var(--bs-body-bg);
        border: 1px solid var(--bs-border-color);
        border-radius: 0.5rem;
        transition: all 0.15s ease-in-out;
    }

    .document-item:hover {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-color: var(--bs-primary);
    }

    .document-info {
        display: flex;
        align-items: center;
        flex: 1;
        min-width: 0;
    }

    .document-icon {
        margin-right: 1rem;
        flex-shrink: 0;
    }

    .document-details {
        flex: 1;
        min-width: 0;
    }

    .document-name {
        font-weight: 600;
        color: var(--bs-body-color);
        margin-bottom: 0.25rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 300px;
    }

    .document-meta {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 0.25rem;
        flex-wrap: wrap;
    }

    .document-meta .badge {
        font-size: 0.75rem;
    }

    .document-meta .text-muted {
        font-size: 0.875rem;
    }

    .document-status {
        margin-top: 0.25rem;
    }

    .processing-status {
        display: flex;
        align-items: center;
        font-size: 0.875rem;
    }

    .status-badge {
        font-size: 0.75rem;
        display: inline-flex;
        align-items: center;
    }

    .document-actions {
        margin-left: 1rem;
        flex-shrink: 0;
    }

    .document-actions .btn {
        min-width: 2.25rem;
    }

    .document-preview {
        display: flex;
        align-items: center;
        padding: 0.75rem;
        background-color: var(--bs-gray-50);
        border-radius: 0.375rem;
        color: var(--bs-body-color);
    }

    .bg-purple {
        background-color: #6f42c1 !important;
    }

    @@media (max-width: 768px) {
        .document-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }

        .document-info {
            width: 100%;
        }

        .document-actions {
            margin-left: 0;
            align-self: flex-end;
        }

        .document-meta {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }

        .document-name {
            max-width: 100%;
        }
    }

    @@media (max-width: 576px) {
        .document-meta {
            gap: 0.25rem;
        }
        
        .document-meta .badge,
        .document-meta .text-muted {
            font-size: 0.75rem;
        }
    }
</style>