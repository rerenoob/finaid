@using finaid.Models.Dashboard
@using finaid.Models.User

@*
    Main dashboard container component that organizes the layout
*@

<div class="dashboard-layout">
    <WelcomeSection 
        User="@CurrentUser"
        PendingTasksCount="@GetPendingTasksCount()"
        OverallProgress="@GetOverallProgress()"
        DaysUntilDeadline="@GetDaysUntilNextDeadline()"
        HasUrgentItems="@GetHasUrgentItems()"
        UrgentItemsCount="@GetUrgentItemsCount()" />
    
    <div class="dashboard-grid">
        <div class="main-content">
            <div class="row g-4">
                <div class="col-xl-8 col-lg-7">
                    <DashboardCard 
                        Title="Application Progress" 
                        Icon="bi-graph-up" 
                        ActionUrl="/progress"
                        IsLoading="@IsLoadingApplications">
                        <ApplicationProgressOverview Applications="@DashboardData.Applications" />
                    </DashboardCard>
                </div>
                
                <div class="col-xl-4 col-lg-5">
                    <DashboardCard 
                        Title="Upcoming Deadlines" 
                        Icon="bi-calendar-event" 
                        ActionUrl="/deadlines"
                        IsLoading="@IsLoadingDeadlines">
                        <DeadlineList Deadlines="@DashboardData.UpcomingDeadlines" />
                    </DashboardCard>
                </div>
                
                <div class="col-xl-8 col-lg-7">
                    <DashboardCard 
                        Title="Recent Activity" 
                        Icon="bi-activity" 
                        ActionUrl="/activity"
                        IsLoading="@IsLoadingActivities">
                        <ActivityFeed Activities="@DashboardData.RecentActivities" />
                    </DashboardCard>
                </div>
                
                <div class="col-xl-4 col-lg-5">
                    <DashboardCard 
                        Title="Notifications" 
                        Icon="bi-bell" 
                        ActionUrl="/notifications"
                        IsLoading="@IsLoadingNotifications">
                        <NotificationCenter Summary="@DashboardData.Notifications" />
                    </DashboardCard>
                </div>
            </div>
        </div>
        
        <div class="sidebar-content">
            <DashboardCard 
                Title="Quick Actions" 
                Icon="bi-lightning"
                IsLoading="@IsLoadingQuickActions">
                <QuickActions 
                    Actions="@DashboardData.QuickActions.Actions" 
                    ShowNewUserActions="@DashboardData.QuickActions.ShowNewUserActions" />
            </DashboardCard>
        </div>
    </div>
    
    @if (DashboardData.LastUpdated != default)
    {
        <div class="dashboard-footer">
            <small class="text-muted">
                <i class="bi bi-clock me-1"></i>
                Last updated: @DashboardData.LastUpdated.ToString("MMM dd, yyyy 'at' h:mm tt")
                <button class="btn btn-link btn-sm p-0 ms-2" @onclick="RefreshDashboard" disabled="@IsRefreshing">
                    <i class="bi bi-arrow-clockwise @(IsRefreshing ? "spin" : "")"></i>
                    @(IsRefreshing ? "Refreshing..." : "Refresh")
                </button>
            </small>
        </div>
    }
</div>

@code {
    [Parameter] public DashboardViewModel DashboardData { get; set; } = new();
    [Parameter] public User? CurrentUser { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }
    
    [Parameter] public bool IsLoadingApplications { get; set; } = false;
    [Parameter] public bool IsLoadingDeadlines { get; set; } = false;
    [Parameter] public bool IsLoadingActivities { get; set; } = false;
    [Parameter] public bool IsLoadingNotifications { get; set; } = false;
    [Parameter] public bool IsLoadingQuickActions { get; set; } = false;
    
    private bool IsRefreshing = false;
    
    private async Task RefreshDashboard()
    {
        IsRefreshing = true;
        StateHasChanged();
        
        try
        {
            await OnRefresh.InvokeAsync();
            await Task.Delay(500); // Small delay to show refresh animation
        }
        finally
        {
            IsRefreshing = false;
            StateHasChanged();
        }
    }
    
    private int GetPendingTasksCount()
    {
        return DashboardData.Applications.Count(a => a.Status == ApplicationStatus.InProgress || 
                                                     a.Status == ApplicationStatus.AwaitingDocuments ||
                                                     a.Status == ApplicationStatus.RequiresAction) +
               DashboardData.UpcomingDeadlines.Count;
    }
    
    private int GetOverallProgress()
    {
        if (!DashboardData.Applications.Any())
            return 0;
            
        return (int)DashboardData.Applications.Average(a => a.OverallCompletion);
    }
    
    private int GetDaysUntilNextDeadline()
    {
        var nextDeadline = DashboardData.UpcomingDeadlines
            .Where(d => d.DueDate > DateTime.UtcNow)
            .OrderBy(d => d.DueDate)
            .FirstOrDefault();
            
        return nextDeadline?.DaysUntilDue ?? 0;
    }
    
    private bool GetHasUrgentItems()
    {
        return DashboardData.Applications.Any(a => a.HasBlockingIssues) ||
               DashboardData.UpcomingDeadlines.Any(d => d.Priority == DeadlinePriority.Critical ||
                                                        (d.Priority == DeadlinePriority.High && d.DaysUntilDue <= 7));
    }
    
    private int GetUrgentItemsCount()
    {
        return DashboardData.Applications.Count(a => a.HasBlockingIssues) +
               DashboardData.UpcomingDeadlines.Count(d => d.Priority == DeadlinePriority.Critical ||
                                                          (d.Priority == DeadlinePriority.High && d.DaysUntilDue <= 7));
    }
}

<style>
    .dashboard-layout {
        max-width: 1400px;
        margin: 0 auto;
        padding: 1rem;
    }
    
    .dashboard-grid {
        display: grid;
        grid-template-columns: 1fr 300px;
        gap: 2rem;
        margin-bottom: 2rem;
    }
    
    .main-content {
        min-width: 0; /* Prevents grid blowout */
    }
    
    .sidebar-content {
        min-width: 0;
    }
    
    .dashboard-footer {
        text-align: center;
        padding-top: 1rem;
        border-top: 1px solid #e9ecef;
    }
    
    .spin {
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
    
    @media (max-width: 1200px) {
        .dashboard-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }
        
        .sidebar-content {
            order: -1; /* Move sidebar to top on mobile */
        }
    }
    
    @media (max-width: 768px) {
        .dashboard-layout {
            padding: 0.5rem;
        }
        
        .dashboard-grid {
            gap: 1rem;
        }
    }
</style>