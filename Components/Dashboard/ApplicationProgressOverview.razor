@using finaid.Models.Dashboard

@*
    Shows overview of all applications and their progress
*@

<div class="application-progress-overview">
    @if (Applications?.Any() == true)
    {
        <div class="applications-list">
            @foreach (var application in Applications)
            {
                <div class="application-item">
                    <div class="application-header">
                        <div class="application-info">
                            <h6 class="application-title">@application.Title</h6>
                            <span class="application-type badge bg-secondary">@application.ApplicationType</span>
                        </div>
                        <div class="application-status">
                            <span class="status-badge @GetStatusClass(application.Status)">
                                @GetStatusDisplay(application.Status)
                            </span>
                        </div>
                    </div>
                    
                    <div class="progress-section">
                        <div class="progress-info">
                            <span class="progress-text">@($"{application.OverallCompletion:F0}% Complete")</span>
                            @if (application.NextDeadline.HasValue)
                            {
                                <span class="deadline-text">
                                    Due @application.NextDeadline.Value.ToString("MMM dd")
                                </span>
                            }
                        </div>
                        <div class="progress-bar-container">
                            <div class="progress">
                                <div class="progress-bar @GetProgressBarClass(application)" 
                                     role="progressbar" 
                                     style="width: @($"{application.OverallCompletion}%")"
                                     aria-valuenow="@application.OverallCompletion" 
                                     aria-valuemin="0" 
                                     aria-valuemax="100">
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(application.NextStepDescription))
                    {
                        <div class="next-step">
                            <small class="text-muted">
                                <i class="bi bi-arrow-right me-1"></i>
                                @application.NextStepDescription
                            </small>
                        </div>
                    }
                    
                    @if (application.HasBlockingIssues)
                    {
                        <div class="blocking-issues">
                            <div class="alert alert-warning alert-sm">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                <strong>@application.BlockingIssueCount issue(s) need attention</strong>
                                <a href="/applications/@application.ApplicationId" class="alert-link ms-1">View Details</a>
                            </div>
                        </div>
                    }
                    
                    <div class="application-actions">
                        <a href="/applications/@application.ApplicationId" class="btn btn-sm btn-primary">
                            Continue Application
                        </a>
                        <span class="last-updated">
                            Updated @GetRelativeTime(application.LastUpdated)
                        </span>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="no-applications">
            <i class="bi bi-file-earmark-plus display-6 text-muted"></i>
            <h6 class="mt-2">No Applications Started</h6>
            <p class="text-muted">Ready to begin your financial aid journey?</p>
            <a href="/fafsa" class="btn btn-primary btn-sm">Start FAFSA Application</a>
        </div>
    }
</div>

<style>
    .applications-list {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }
    
    .application-item {
        border: 1px solid #e9ecef;
        border-radius: 0.5rem;
        padding: 1rem;
        background-color: #fff;
        transition: box-shadow 0.15s ease-in-out;
    }
    
    .application-item:hover {
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .application-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1rem;
    }
    
    .application-info {
        flex-grow: 1;
    }
    
    .application-title {
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: #495057;
    }
    
    .application-type {
        font-size: 0.75rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .progress-section {
        margin-bottom: 1rem;
    }
    
    .progress-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }
    
    .progress-text {
        font-weight: 600;
        color: #495057;
    }
    
    .deadline-text {
        font-size: 0.875rem;
        color: #6c757d;
    }
    
    .progress-bar-container .progress {
        height: 8px;
        background-color: #e9ecef;
    }
    
    .progress-bar {
        transition: width 0.3s ease-in-out;
    }
    
    .next-step {
        margin-bottom: 1rem;
        padding: 0.5rem;
        background-color: #f8f9fa;
        border-radius: 0.25rem;
        border-left: 3px solid #0d6efd;
    }
    
    .blocking-issues {
        margin-bottom: 1rem;
    }
    
    .alert-sm {
        padding: 0.5rem 0.75rem;
        margin-bottom: 0;
        font-size: 0.875rem;
    }
    
    .application-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .last-updated {
        font-size: 0.875rem;
        color: #6c757d;
    }
    
    .no-applications {
        text-align: center;
        padding: 3rem 1rem;
        color: #6c757d;
    }
    
    @media (max-width: 768px) {
        .application-header {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .application-status {
            margin-top: 0.5rem;
        }
        
        .progress-info {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.25rem;
        }
        
        .application-actions {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }
        
        .last-updated {
            order: -1;
        }
    }
</style>

@code {
    [Parameter] public List<ApplicationProgress>? Applications { get; set; }
    
    private string GetStatusClass(ApplicationStatus status)
    {
        return status switch
        {
            ApplicationStatus.NotStarted => "badge bg-secondary",
            ApplicationStatus.InProgress => "badge bg-primary",
            ApplicationStatus.AwaitingDocuments => "badge bg-warning text-dark",
            ApplicationStatus.AwaitingReview => "badge bg-info text-dark",
            ApplicationStatus.Submitted => "badge bg-success",
            ApplicationStatus.Approved => "badge bg-success",
            ApplicationStatus.Rejected => "badge bg-danger",
            ApplicationStatus.RequiresAction => "badge bg-warning text-dark",
            _ => "badge bg-secondary"
        };
    }
    
    private string GetStatusDisplay(ApplicationStatus status)
    {
        return status switch
        {
            ApplicationStatus.NotStarted => "Not Started",
            ApplicationStatus.InProgress => "In Progress",
            ApplicationStatus.AwaitingDocuments => "Awaiting Documents",
            ApplicationStatus.AwaitingReview => "Under Review",
            ApplicationStatus.Submitted => "Submitted",
            ApplicationStatus.Approved => "Approved",
            ApplicationStatus.Rejected => "Rejected",
            ApplicationStatus.RequiresAction => "Action Required",
            _ => status.ToString()
        };
    }
    
    private string GetProgressBarClass(ApplicationProgress application)
    {
        if (application.HasBlockingIssues)
            return "bg-warning";
        
        return application.OverallCompletion switch
        {
            < 25 => "bg-danger",
            < 50 => "bg-warning",
            < 75 => "bg-info",
            _ => "bg-success"
        };
    }
    
    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;
        
        return timeSpan switch
        {
            { TotalMinutes: < 1 } => "just now",
            { TotalHours: < 1 } => $"{(int)timeSpan.TotalMinutes} minutes ago",
            { TotalDays: < 1 } => $"{(int)timeSpan.TotalHours} hours ago",
            { TotalDays: < 7 } => $"{(int)timeSpan.TotalDays} days ago",
            _ => dateTime.ToString("MMM dd, yyyy")
        };
    }
}