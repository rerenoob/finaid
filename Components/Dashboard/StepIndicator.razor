@using finaid.Models.Progress

@*
    Multi-step progress visualization component
*@

<div class="step-indicator @GetStepClass()" @onclick="OnStepClick">
    <div class="step-icon-container">
        <div class="step-icon">
            @if (Step.Status == StepStatus.Completed)
            {
                <i class="bi bi-check-lg"></i>
            }
            else if (Step.Status == StepStatus.InProgress)
            {
                <div class="step-number">@Step.Order</div>
            }
            else if (Step.Status == StepStatus.RequiresAction || Step.Status == StepStatus.Blocked)
            {
                <i class="bi bi-exclamation-triangle"></i>
            }
            else
            {
                <div class="step-number">@Step.Order</div>
            }
        </div>
        
        @if (Step.Status == StepStatus.InProgress && Step.Completion > 0)
        {
            <div class="step-progress-ring">
                <svg viewBox="0 0 24 24" class="progress-ring">
                    <circle cx="12" cy="12" r="10" class="progress-ring-bg"/>
                    <circle cx="12" cy="12" r="10" class="progress-ring-fill"
                            stroke-dasharray="@($"{(double)Step.Completion * 0.628}, 62.8")" />
                </svg>
            </div>
        }
    </div>
    
    <div class="step-content">
        <div class="step-header">
            <h6 class="step-title">@Step.DisplayName</h6>
            @if (Step.Status == StepStatus.InProgress && Step.Completion > 0)
            {
                <span class="step-completion">@($"{Step.Completion:F0}%")</span>
            }
        </div>
        
        @if (!string.IsNullOrEmpty(Step.Description))
        {
            <p class="step-description">@Step.Description</p>
        }
        
        @if (Step.RequiredActions.Any())
        {
            <div class="required-actions">
                <small class="actions-label">Required Actions:</small>
                <ul class="actions-list">
                    @foreach (var action in Step.RequiredActions.Take(3))
                    {
                        <li>@action</li>
                    }
                    @if (Step.RequiredActions.Count > 3)
                    {
                        <li><em>and @(Step.RequiredActions.Count - 3) more...</em></li>
                    }
                </ul>
            </div>
        }
        
        @if (Step.CompletedAt.HasValue)
        {
            <div class="completion-info">
                <small class="text-muted">
                    <i class="bi bi-clock me-1"></i>
                    Completed @GetRelativeTime(Step.CompletedAt.Value)
                </small>
            </div>
        }
        
        @if (Step.IsOptional)
        {
            <div class="optional-badge">
                <span class="badge bg-light text-dark">Optional</span>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public ProgressStep Step { get; set; } = new();
    [Parameter] public EventCallback OnStepClick { get; set; }
    [Parameter] public bool IsClickable { get; set; } = true;
    [Parameter] public bool ShowProgress { get; set; } = true;
    [Parameter] public bool Compact { get; set; } = false;
    
    private string GetStepClass()
    {
        var classes = new List<string> { "step-indicator" };
        
        classes.Add($"step-{Step.Status.ToString().ToLower()}");
        
        if (IsClickable && OnStepClick.HasDelegate)
        {
            classes.Add("step-clickable");
        }
        
        if (Compact)
        {
            classes.Add("step-compact");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;
        
        return timeSpan switch
        {
            { TotalHours: < 1 } => "less than an hour ago",
            { TotalDays: < 1 } => $"{(int)timeSpan.TotalHours} hours ago",
            { TotalDays: < 7 } => $"{(int)timeSpan.TotalDays} days ago",
            { TotalDays: < 30 } => $"{(int)(timeSpan.TotalDays / 7)} weeks ago",
            _ => dateTime.ToString("MMM dd, yyyy")
        };
    }
}

<style>
    .step-indicator {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #fff;
        border: 2px solid #e9ecef;
        transition: all 0.15s ease-in-out;
        position: relative;
    }
    
    .step-indicator:not(:last-child) {
        margin-bottom: 1rem;
    }
    
    .step-indicator.step-clickable:hover {
        border-color: #0d6efd;
        box-shadow: 0 2px 8px rgba(13, 110, 253, 0.15);
        cursor: pointer;
        transform: translateY(-1px);
    }
    
    .step-indicator.step-compact {
        padding: 0.75rem;
        gap: 0.75rem;
    }
    
    /* Status-based styling */
    .step-indicator.step-completed {
        border-color: #198754;
        background-color: rgba(25, 135, 84, 0.05);
    }
    
    .step-indicator.step-inprogress {
        border-color: #0d6efd;
        background-color: rgba(13, 110, 253, 0.05);
    }
    
    .step-indicator.step-requiresaction,
    .step-indicator.step-blocked {
        border-color: #dc3545;
        background-color: rgba(220, 53, 69, 0.05);
    }
    
    .step-indicator.step-notstarted {
        border-color: #6c757d;
        opacity: 0.7;
    }
    
    .step-indicator.step-skipped {
        border-color: #6c757d;
        background-color: rgba(108, 117, 125, 0.05);
        opacity: 0.6;
    }
    
    .step-icon-container {
        position: relative;
        flex-shrink: 0;
    }
    
    .step-icon {
        width: 2.5rem;
        height: 2.5rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        font-size: 1rem;
        color: #fff;
        background-color: #6c757d;
        transition: all 0.15s ease-in-out;
    }
    
    .step-completed .step-icon {
        background-color: #198754;
    }
    
    .step-inprogress .step-icon {
        background-color: #0d6efd;
    }
    
    .step-requiresaction .step-icon,
    .step-blocked .step-icon {
        background-color: #dc3545;
    }
    
    .step-number {
        font-size: 0.875rem;
    }
    
    .step-progress-ring {
        position: absolute;
        top: -2px;
        left: -2px;
        width: calc(100% + 4px);
        height: calc(100% + 4px);
    }
    
    .progress-ring {
        width: 100%;
        height: 100%;
        transform: rotate(-90deg);
    }
    
    .progress-ring-bg {
        fill: none;
        stroke: #e9ecef;
        stroke-width: 2;
    }
    
    .progress-ring-fill {
        fill: none;
        stroke: #0d6efd;
        stroke-width: 2;
        stroke-linecap: round;
        transition: stroke-dasharray 0.3s ease;
    }
    
    .step-content {
        flex-grow: 1;
        min-width: 0;
    }
    
    .step-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 0.5rem;
    }
    
    .step-title {
        margin-bottom: 0;
        font-weight: 600;
        color: #495057;
        flex-grow: 1;
    }
    
    .step-completion {
        font-size: 0.875rem;
        font-weight: 600;
        color: #0d6efd;
        white-space: nowrap;
        margin-left: 0.5rem;
    }
    
    .step-description {
        margin-bottom: 0.75rem;
        color: #6c757d;
        font-size: 0.875rem;
        line-height: 1.4;
    }
    
    .required-actions {
        margin-bottom: 0.75rem;
    }
    
    .actions-label {
        font-weight: 600;
        color: #495057;
        display: block;
        margin-bottom: 0.25rem;
    }
    
    .actions-list {
        margin: 0;
        padding-left: 1rem;
        font-size: 0.875rem;
        color: #6c757d;
    }
    
    .actions-list li {
        margin-bottom: 0.125rem;
    }
    
    .completion-info {
        margin-bottom: 0.5rem;
    }
    
    .optional-badge {
        margin-top: 0.5rem;
    }
    
    /* Compact mode adjustments */
    .step-compact .step-icon {
        width: 2rem;
        height: 2rem;
        font-size: 0.875rem;
    }
    
    .step-compact .step-title {
        font-size: 0.95rem;
    }
    
    .step-compact .step-description {
        font-size: 0.8rem;
    }
    
    @@media (max-width: 768px) {
        .step-indicator {
            gap: 0.75rem;
            padding: 0.75rem;
        }
        
        .step-icon {
            width: 2rem;
            height: 2rem;
            font-size: 0.875rem;
        }
        
        .step-header {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .step-completion {
            margin-left: 0;
            margin-top: 0.25rem;
        }
    }
    
    /* Animation for new steps */
    .step-indicator {
        animation: step-fade-in 0.3s ease-out;
    }
    
    @@keyframes step-fade-in {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>