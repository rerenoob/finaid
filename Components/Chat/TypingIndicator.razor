@using System.Timers

<div class="message ai-message typing">
    <div class="message-avatar">
        <i class="fas fa-robot"></i>
    </div>
    <div class="message-content">
        <div class="message-bubble assistant typing-bubble">
            <div class="typing-indicator">
                <div class="typing-dots">
                    <span class="dot dot-1"></span>
                    <span class="dot dot-2"></span>
                    <span class="dot dot-3"></span>
                </div>
                <span class="typing-text">@TypingText</span>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string TypingText { get; set; } = "AI is thinking...";
    [Parameter] public bool AnimateText { get; set; } = true;
    [Parameter] public int AnimationIntervalMs { get; set; } = 2000;

    private Timer? _animationTimer;
    private readonly string[] _typingMessages = new[]
    {
        "AI is thinking...",
        "Processing your request...",
        "Analyzing information...",
        "Generating response...",
        "Almost ready..."
    };
    private int _currentMessageIndex = 0;

    protected override void OnInitialized()
    {
        if (AnimateText && TypingText == "AI is thinking...")
        {
            StartTextAnimation();
        }
    }

    private void StartTextAnimation()
    {
        _animationTimer = new Timer(AnimationIntervalMs);
        _animationTimer.Elapsed += OnAnimationTick;
        _animationTimer.Start();
    }

    private void OnAnimationTick(object? sender, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            _currentMessageIndex = (_currentMessageIndex + 1) % _typingMessages.Length;
            TypingText = _typingMessages[_currentMessageIndex];
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        _animationTimer?.Stop();
        _animationTimer?.Dispose();
    }
}