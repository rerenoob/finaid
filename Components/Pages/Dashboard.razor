@page "/dashboard"
@using finaid.Models.Dashboard
@using finaid.Models.User
@using finaid.Services.Dashboard
@using finaid.Services
@using finaid.Components.Dashboard
@inject IDashboardDataService DashboardDataService
@inject finaid.Services.AppStateService AppState
@inject IJSRuntime JSRuntime

<PageTitle>Dashboard - FinAid Assistant</PageTitle>

<link href="~/css/dashboard.css" rel="stylesheet" />

<div class="dashboard-container">
    <DashboardLayout 
        DashboardData="@dashboardData"
        CurrentUser="@currentUser"
        OnRefresh="@RefreshDashboardData"
        IsLoadingApplications="@isLoadingApplications"
        IsLoadingDeadlines="@isLoadingDeadlines"
        IsLoadingActivities="@isLoadingActivities"
        IsLoadingNotifications="@isLoadingNotifications"
        IsLoadingQuickActions="@isLoadingQuickActions" />
</div>

@code {
    private DashboardViewModel dashboardData = new();
    private User currentUser = new() 
    { 
        FirstName = "John", 
        LastName = "Doe", 
        Email = "john.doe@example.com" 
    };
    
    private bool isLoadingApplications = false;
    private bool isLoadingDeadlines = false;
    private bool isLoadingActivities = false;
    private bool isLoadingNotifications = false;
    private bool isLoadingQuickActions = false;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user from app state (mock data for now)
            currentUser = AppState.GetValue<User>(AppStateKeys.CurrentUser, currentUser);
            
            // Load dashboard data
            await LoadDashboardData();
        }
        catch (Exception ex)
        {
            // Log error and show empty dashboard
            Console.WriteLine($"Error initializing dashboard: {ex.Message}");
            dashboardData = new DashboardViewModel();
        }
    }
    
    private async Task LoadDashboardData()
    {
        try
        {
            // Set all loading states
            SetAllLoadingStates(true);
            StateHasChanged();
            
            // Load dashboard data - in a real app, this would use the current user's ID
            dashboardData = await DashboardDataService.GetDashboardDataAsync(Guid.NewGuid());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
            dashboardData = new DashboardViewModel();
        }
        finally
        {
            SetAllLoadingStates(false);
            StateHasChanged();
        }
    }
    
    private async Task RefreshDashboardData()
    {
        await LoadDashboardData();
        
        // Optional: Show a toast notification
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Dashboard refreshed");
        }
        catch (Exception)
        {
            // Ignore JS errors
        }
    }
    
    private void SetAllLoadingStates(bool isLoading)
    {
        isLoadingApplications = isLoading;
        isLoadingDeadlines = isLoading;
        isLoadingActivities = isLoading;
        isLoadingNotifications = isLoading;
        isLoadingQuickActions = isLoading;
    }
}